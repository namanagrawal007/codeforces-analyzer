{"version":3,"sources":["components/Header/Header.js","components/VersusRatingGraph/VersusRatingGraph.js","components/VersusCommonContest/VersusCommonContest.js","components/VersusProblemIndexGraph/VersusProblemIndexGraph.js","components/VersusProblemRatingGraph/VersusProblemRatingGraph.js","components/VersusUser/VersusUserInfo.js","components/VersusUser/VersusUserContest.js","components/VersusSubmissionsCompare/VersusSubmissionsCompare.js","components/VersusCommonContest/VersusCommonPie.js","components/Footer/Footer.js","pages/Versus.js","components/UserBio/UserInfo.js","components/UserBio/UserContest.js","components/ProblemVerdict/ProblemVerdict.js","components/ProblemLanguage/ProblemLanguage.js","components/RatingGraph/RatingGraph.js","components/ProblemTagsGraph/ProblemTagsGraph.js","components/ProblemRatingGraph/ProblemRatingGraph.js","components/ProblemIndexGraph/ProblemIndexGraph.js","pages/SingleUser.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","title","btn","marginRight","fontSize","color","navLink","textDecoration","active","backgroundColor","Header","classes","_jsx","className","children","AppBar","position","_jsxs","Toolbar","Typography","variant","Link","exact","to","Button","PersonIcon","PeopleIcon","VersusRatingGraph","_ref","userContest1","userContest2","datesMap","Map","datesMap1","datesMap2","data","labels","datasets","label","length","handle","fill","borderColor","Array","from","i","dateSeconds","ratingUpdateTimeSeconds","rating","newRating","set","datesMapAsc","entries","sort","key","value","date","Date","setTime","momentDate","moment","format","push","has","get","Line","options","scales","y","beginAtZero","xAxes","type","time","month","plugins","display","text","animation","duration","responsive","maintainAspectRatio","spanGaps","height","width","container","one","two","draw","VersusCommonContest","username1","username2","contest1","contestId","rows","name","contestName","user1","rank","user2","diff","reverse","page","setPage","useState","rowsPerPage","setRowsPerPage","columns","id","minWidth","align","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","style","TableBody","slice","row","component","scope","Math","abs","TablePagination","rowsPerPageOptions","count","onChangePage","handleChangePage","event","newPage","onChangeRowsPerPage","target","VersusProblemIndexGraph","userSubmissions1","userSubmissions2","index","index1","id1","verdict","key1","problem","currIndex1","temp","index2","id2","key2","currIndex2","borderWidth","indexAsc","Bar","yAxes","ticks","VersusProblemRatingGraph","rating1","currRating1","undefined","parseInt","rating2","currRating2","ratingAsc","table","VersusUserInfo","userInfo1","userInfo2","name1","firstName","lastName","country1","country","maxRating1","maxRating","maxRank","contribution1","contribution","name2","country2","maxRating2","contribution2","splice","data1","data2","VersusUserContest","bestRank1","min","apply","item","worstRank1","max","maxUp1","oldRating","maxDown1","bestRank2","worstRank2","maxUp2","maxDown2","VersusSubmissionsCompare","tried1","solved1","submissions1","tried2","solved2","submissions2","size","VersusCommonPie","Pie","legend","Footer","href","Versus","currname1","setCurrname1","setUsername1","setUserInfo1","setUserContest1","setUserSubmissions1","currname2","setCurrname2","setUsername2","setUserInfo2","setUserContest2","setUserSubmissions2","noValidate","autoComplete","onSubmit","async","e","preventDefault","console","log","user","axios","concat","result","fetchItemsVersus","TextField","onChange","_Fragment","render","UserInfo","userInfo","username","UserContest","userContest","bestRank","worstRank","maxUp","maxDown","ProblemVerdict","total","userSubmissions","ac","tle","wa","rte","others","datalabels","borderRadius","font","ProblemLanguage","lang","currLang","programmingLanguage","langDsc","a","b","RatingGraph","x","ProblemTagsGraph","tag","currTag","tags","j","tagDsc","Doughnut","ProblemRatingGraph","currRating","IndexGraph","currIndex","SingleUser","currname","setCurrname","setUsername","setUserInfo","setUserContest","setUserSubmissions","src","alt","fetchItems","ProblemIndexGraph","App","Router","Switch","Route","path","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c84d361f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        \r\n    },\r\n    menuButton: {\r\n        // marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        // fontSize:12 rem\r\n    },\r\n    btn: {\r\n        marginRight: 20,\r\n        fontSize: 12,\r\n        color: 'white',\r\n    },\r\n    navLink : {\r\n        textDecoration : 'none',\r\n    },\r\n    active: {\r\n        backgroundColor: 'red',\r\n        textDecoration : 'none',\r\n    },\r\n}));\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Codeforces Analyzer\r\n                    </Typography>\r\n                    <Link exact to=\"/Codeforces-Analyzer/\" className={classes.navLink}>\r\n                        <Button color=\"inherit\" className={classes.btn}>\r\n                            <PersonIcon />\r\n                            Single User\r\n                        </Button>\r\n                    </Link>\r\n                    <Link exact to=\"/Codeforces-Analyzer/versus\"  className={classes.navLink}> \r\n                        <Button color=\"inherit\" className={classes.btn}>\r\n                            <PeopleIcon />\r\n                            Versus\r\n                        </Button>\r\n                    </Link>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nconst VersusRatingGraph = ({userContest1,userContest2}) => {\r\n    let datesMap= new Map();\r\n    let datesMap1= new Map();\r\n    let datesMap2=new Map();\r\n\r\n    let username1 = userContest1.length>0 ? userContest1[0].handle : '';\r\n    let username2 = userContest2.length>0 ? userContest2[0].handle : '';\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [],\r\n            fill: false,\r\n            backgroundColor: 'red',\r\n            borderColor: 'rgba(255,0,0,0.2)',\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [],\r\n            fill: false,\r\n            backgroundColor: 'blue',\r\n            borderColor: 'rgba(25,25,112, 0.2)',\r\n          }\r\n        ],\r\n    };\r\n\r\n    \r\n    userContest1 = Array.from(userContest1);  \r\n    for(let i=0;i<userContest1.length;i++){    \r\n        let dateSeconds=userContest1[i].ratingUpdateTimeSeconds;\r\n        let rating=userContest1[i].newRating;\r\n        \r\n        datesMap.set(dateSeconds,1);\r\n        datesMap1.set(dateSeconds,rating);\r\n    }\r\n  \r\n    userContest2 = Array.from(userContest2);  \r\n    for(let i=0;i<userContest2.length;i++){    \r\n        let dateSeconds=userContest2[i].ratingUpdateTimeSeconds;\r\n        let rating=userContest2[i].newRating;\r\n        \r\n        datesMap.set(dateSeconds,1);\r\n        datesMap2.set(dateSeconds,rating);\r\n    }\r\n\r\n    var datesMapAsc = new Map([...datesMap.entries()].sort());\r\n\r\n    for(let[key,value] of datesMapAsc){\r\n      var date = new Date(null);\r\n      date.setTime(key*1000);\r\n      let momentDate = moment(date).format('MMM D, YYYY');\r\n      data.labels.push(momentDate);  \r\n      if(datesMap1.has(key)){\r\n        let rating=datesMap1.get(key);\r\n        data.datasets[0].data.push(rating);\r\n      }\r\n      else{\r\n        data.datasets[0].data.push(null);\r\n      }\r\n      if(datesMap2.has(key)){\r\n        let rating=datesMap2.get(key);\r\n        data.datasets[1].data.push(rating);\r\n      }\r\n      else{\r\n        data.datasets[1].data.push(null);\r\n      }\r\n    }\r\n\r\n    const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          },\r\n          xAxes: [\r\n            \r\n            {\r\n              type: 'time',\r\n              time: {\r\n               \r\n                month: 'YYYY MMM',\r\n               \r\n              }\r\n            }\r\n          ],\r\n        },\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: 'Rating Graph'\r\n            }\r\n        },\r\n        animation: {\r\n          duration: 0\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        spanGaps: true,\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <Line \r\n                data={data} \r\n                options={options} \r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusRatingGraph\r\n","import { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport '../../pages/Versus.css';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        //   maxHeight: 440,\r\n    },\r\n    one: {\r\n\r\n    },\r\n    two: {\r\n\r\n    },\r\n    draw: {\r\n\r\n    }\r\n});\r\n\r\nconst VersusCommonContest = ({ userContest1, userContest2 }) => {\r\n    const classes = useStyles();\r\n\r\n    let contest1 = new Map();\r\n    let username1, username2;\r\n    if (userContest2.length > 0) {\r\n        username1 = userContest1[0].handle;\r\n        username2 = userContest2[0].handle;\r\n    }\r\n\r\n    for (let i = 0; i < userContest1.length; i++) {\r\n        contest1.set(userContest1[i].contestId, userContest1[i]);\r\n    }\r\n    let rows = [];\r\n\r\n    for (let i = 0; i < userContest2.length; i++) {\r\n        if (!contest1.has(userContest2[i].contestId)) {\r\n            continue;\r\n        }\r\n\r\n        rows.push({\r\n            name: userContest2[i].contestName,\r\n            user1: contest1.get(userContest2[i].contestId).rank,\r\n            user2: userContest2[i].rank,\r\n            diff: contest1.get(userContest2[i].contestId).rank - userContest2[i].rank,\r\n        })\r\n    }\r\n    rows = rows.reverse();\r\n    // console.log(rows);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const columns = [\r\n        { id: 'name', label: 'Common Contest', minWidth: 170, align: 'left', },\r\n        { id: 'rank1', label: username1, minWidth: 100, align: 'right', },\r\n        { id: 'rank2', label: username2, minWidth: 100, align: 'right', },\r\n        { id: 'diff', label: 'Difference', minWidth: 100, align: 'right', },\r\n    ];\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead className=\"versus-table-head\">\r\n                        <TableRow >\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{ backgroundColor: \"#8ba3cf\" }}\r\n                                    // style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                            \r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody className=\"versus-table-body\">\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                \r\n                                <TableRow key={row.name} style={row.diff>0 ? {backgroundColor: \"rgb(201 177 207)\"} : {backgroundColor: \"#f0d6f6\"}}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.name}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{row.user1}</TableCell>\r\n                                    <TableCell align=\"right\">{row.user2}</TableCell>\r\n                                    <TableCell align=\"right\">{Math.abs(row.diff)}</TableCell>\r\n\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                className=\"versus-table-head\"\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n        \r\n    )\r\n}\r\n\r\nexport default VersusCommonContest\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst VersusProblemIndexGraph = ({userSubmissions1,userSubmissions2,username1,username2}) => {\r\n\r\n    let index = new Map();\r\n    let index1= new Map();\r\n    let id1=new Map();\r\n    for(let i=0;i<userSubmissions1.length;i++){\r\n        if(userSubmissions1[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key1=userSubmissions1[i].contestId + userSubmissions1[i].problem.index;\r\n        if(id1.has(key1)){\r\n            continue;\r\n        }\r\n        id1.set(key1,true);\r\n        let currIndex1=userSubmissions1[i].problem.index[0];\r\n        if(currIndex1<'A' || currIndex1 > 'Z'){\r\n            continue;\r\n        }\r\n        if(!index1.has(currIndex1)){\r\n            index1.set(currIndex1,1);\r\n        }\r\n        else{\r\n            let temp=index1.get(currIndex1);\r\n            index1.set(currIndex1,temp+1);\r\n        }\r\n        index.set(currIndex1,1);\r\n    }\r\n\r\n    let index2= new Map();\r\n    let id2=new Map();\r\n    for(let i=0;i<userSubmissions2.length;i++){\r\n        if(userSubmissions2[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key2=userSubmissions2[i].contestId + userSubmissions2[i].problem.index;\r\n        if(id2.has(key2)){\r\n            continue;\r\n        }\r\n        id2.set(key2,true);\r\n        let currIndex2=userSubmissions2[i].problem.index[0];\r\n        if(currIndex2<'A' || currIndex2 > 'Z'){\r\n            continue;\r\n        }\r\n        if(!index2.has(currIndex2)){\r\n            index2.set(currIndex2,1);\r\n        }\r\n        else{\r\n            let temp=index2.get(currIndex2);\r\n            index2.set(currIndex2,temp+1)\r\n        }\r\n        index.set(currIndex2,1);\r\n    }\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [],\r\n            backgroundColor: [\r\n              'red',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [],\r\n            backgroundColor: [\r\n              'blue',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n\r\n    \r\n    var indexAsc = new Map([...index.entries()].sort());\r\n\r\n    for(let[key,value] of indexAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(index1.has(key)? index1.get(key) :0);\r\n        data.datasets[1].data.push(index2.has(key)? index2.get(key) :0);  \r\n    }\r\n    \r\n    const options = {\r\n        // barValueSpacing: 20,\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Index'\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\t           \r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusProblemIndexGraph\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst VersusProblemRatingGraph = ({userSubmissions1,userSubmissions2,username1,username2}) => {\r\n    \r\n    let rating = new Map();\r\n\r\n    let rating1 = new Map();\r\n    let id1=new Map();\r\n    for(let i=0;i<userSubmissions1.length;i++){\r\n        if(userSubmissions1[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key1=userSubmissions1[i].contestId + userSubmissions1[i].problem.index;\r\n        if(id1.has(key1)){\r\n            continue;\r\n        }\r\n        id1.set(key1,true);\r\n        let currRating1=userSubmissions1[i].problem.rating;\r\n        if(currRating1===undefined){\r\n            continue;\r\n        }\r\n        currRating1=parseInt(currRating1);\r\n        if(!rating1.has(currRating1)){\r\n            rating1.set(currRating1,1);\r\n        }\r\n        else{\r\n            let temp=rating1.get(currRating1);\r\n            rating1.set(currRating1,temp+1);\r\n        }\r\n        rating.set(currRating1,1);\r\n    } \r\n    \r\n    let rating2 = new Map();\r\n    let id2=new Map();\r\n    for(let i=0;i<userSubmissions2.length;i++){\r\n        if(userSubmissions2[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key2=userSubmissions2[i].contestId + userSubmissions2[i].problem.index;\r\n        if(id2.has(key2)){\r\n            continue;\r\n        }\r\n        id2.set(key2,true);\r\n        let currRating2=userSubmissions2[i].problem.rating;\r\n        if(currRating2===undefined){\r\n            continue;\r\n        }\r\n        currRating2=parseInt(currRating2);\r\n        if(!rating2.has(currRating2)){\r\n            rating2.set(currRating2,1);\r\n        }\r\n        else{\r\n            let temp=rating2.get(currRating2);\r\n            rating2.set(currRating2,temp+1);\r\n        }\r\n        rating.set(currRating2,1);\r\n    } \r\n    \r\n    var ratingAsc = new Map([...rating.entries()].sort(function order(key1, key2) {\r\n        if (parseInt(key1) < parseInt(key2)) return -1;\r\n        else if (parseInt(key1) > parseInt(key2)) return +1;\r\n        else return 0;\r\n    }));\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [],\r\n            backgroundColor: [\r\n              'red',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [],\r\n            backgroundColor: [\r\n              'blue',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n\r\n    for(let[key,value] of ratingAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(rating1.has(key)? rating1.get(key) :0);\r\n        data.datasets[1].data.push(rating2.has(key)? rating2.get(key) :0);  \r\n    }\r\n\r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Rating'\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\r\n\t              height={400}\r\n               \r\n            />     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusProblemRatingGraph\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport '../../pages/Versus.css'\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // maxWidth: 500,\r\n        // minWidth: 450\r\n    },\r\n});\r\n\r\nconst rows = [\r\n\r\n];\r\n\r\nconst VersusUserInfo = ({ userInfo1, userInfo2}) => {\r\n    const classes = useStyles();\r\n    let username1 = userInfo1.handle;\r\n    let name1 = userInfo1.firstName + \" \" + userInfo1.lastName;\r\n    let country1 = userInfo1.country;\r\n    let rating1 = userInfo1.rating + '(' + userInfo1.rank + ')';\r\n    let maxRating1 = userInfo1.maxRating + '(' + userInfo1.maxRank + ')';\r\n    let contribution1 = userInfo1.contribution;\r\n\r\n    let username2 = userInfo2.handle;\r\n    let name2 = userInfo2.firstName + \" \" + userInfo2.lastName;\r\n    let country2 = userInfo2.country;\r\n    let rating2 = userInfo2.rating + '(' + userInfo2.rank + ')';\r\n    let maxRating2 = userInfo2.maxRating + '(' + userInfo2.maxRank + ')';\r\n    let contribution2 = userInfo2.contribution;\r\n\r\n    rows.splice(0, rows.length);\r\n    rows.push({\r\n        name: \"Name\",\r\n        data1: name1,\r\n        data2: name2\r\n    });\r\n    rows.push({\r\n        name: 'Country',\r\n        data1: country1,\r\n        data2: country2\r\n    });\r\n    rows.push({\r\n        name: 'Rating',\r\n        data1: rating1,\r\n        data2: rating2\r\n    });\r\n    rows.push({\r\n        name: 'Max Rating',\r\n        data1: maxRating1,\r\n        data2: maxRating2\r\n    });\r\n    rows.push({\r\n        name: 'Contribution',\r\n        data1: contribution1,\r\n        data2: contribution2\r\n    });\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead className=\"versus-table-head\">\r\n                    <TableRow>\r\n                        <TableCell>Info of</TableCell>\r\n                        <TableCell align=\"right\">{username1}</TableCell>\r\n                        <TableCell align=\"right\">{username2}</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"versus-table-body\">\r\n                    {rows.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.data1}</TableCell>\r\n                            <TableCell align=\"right\">{row.data2}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default VersusUserInfo\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport '../../pages/Versus.css'\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // maxWidth: 500,\r\n        // minWidth: 450\r\n    },\r\n});\r\n\r\nconst rows = [];\r\n\r\nconst VersusUserContest = ({ userContest1, userContest2 }) => {\r\n    const classes = useStyles();\r\n    \r\n    let username1 = userContest1.length>0 ? userContest1[0].handle : '';\r\n    userContest1 = Array.from(userContest1);\r\n    let bestRank1 = Math.min.apply(null, userContest1.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let worstRank1 = Math.max.apply(null, userContest1.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let maxUp1 = Math.max.apply(null, userContest1.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n    let maxDown1 = Math.min.apply(null, userContest1.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n\r\n    let username2 = userContest2.length>0 ? userContest2[0].handle : '';\r\n    \r\n    userContest2 = Array.from(userContest2);\r\n    let bestRank2 = Math.min.apply(null, userContest2.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let worstRank2 = Math.max.apply(null, userContest2.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let maxUp2 = Math.max.apply(null, userContest2.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n    let maxDown2 = Math.min.apply(null, userContest2.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n\r\n    rows.splice(0, rows.length);\r\n    rows.push({\r\n        name: \"No of contests\",\r\n        data1: userContest1.length,\r\n        data2: userContest2.length,\r\n    });\r\n    rows.push({\r\n        name: 'Best Rank',\r\n        data1: bestRank1,\r\n        data2: bestRank2\r\n    });\r\n    rows.push({\r\n        name: 'Worst Rank',\r\n        data1: worstRank1,\r\n        data2: worstRank2\r\n    });\r\n    rows.push({\r\n        name: 'Max Up',\r\n        data1: maxUp1,\r\n        data2: maxUp2\r\n    });\r\n    rows.push({\r\n        name: 'Max Down',\r\n        data1: maxDown1,\r\n        data2: maxDown2\r\n    });\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead className=\"versus-table-head\">\r\n                    <TableRow>\r\n                        <TableCell>Contests of</TableCell>\r\n                        <TableCell align=\"right\">{username1}</TableCell>\r\n                        <TableCell align=\"right\">{username2}</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"versus-table-body\">\r\n                    {rows.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.data1}</TableCell>\r\n                            <TableCell align=\"right\">{row.data2}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default VersusUserContest\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst VersusSubmissionsCompare = ({username1,username2,userSubmissions1,userSubmissions2}) => {\r\n\r\n    let tried1 = new Map();\r\n    let solved1 = new Map();\r\n    for(let i=0;i<userSubmissions1.length;i++){\r\n        let key=userSubmissions1[i].contestId + userSubmissions1[i].problem.index;\r\n        let verdict=userSubmissions1[i].verdict;\r\n        if(!tried1.has(key)){\r\n            tried1.set(key,1);\r\n        }\r\n        if(!solved1.has(key) && verdict===\"OK\"){\r\n            solved1.set(key,1);\r\n        }\r\n    }\r\n    let submissions1= userSubmissions1.length;\r\n\r\n    let tried2 = new Map();\r\n    let solved2 = new Map();\r\n    for(let i=0;i<userSubmissions2.length;i++){\r\n        let key=userSubmissions2[i].contestId + userSubmissions2[i].problem.index;\r\n        let verdict=userSubmissions2[i].verdict;\r\n        if(!tried2.has(key)){\r\n            tried2.set(key,1);\r\n        }\r\n        if(!solved2.has(key) && verdict===\"OK\"){\r\n            solved2.set(key,1);\r\n        }\r\n    }\r\n    let submissions2= userSubmissions2.length;\r\n\r\n    const data = {\r\n        labels: ['Tried','Solved','Total Subissions'],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [tried1.size,solved1.size,submissions1],\r\n            backgroundColor: [\r\n              'red',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [tried2.size,solved2.size,submissions2],\r\n            backgroundColor: [\r\n              'blue',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Submissions'\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\r\n\t              height={400}\r\n               \r\n            />  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusSubmissionsCompare\r\n","import { Pie } from \"react-chartjs-2\";\r\n\r\nconst VersusCommonPie = ({ userContest1, userContest2 }) => {\r\n    let contest1 = new Map();\r\n    let one=0,two=0,draw=0;\r\n\r\n    let username1 = userContest1.length>0 ? userContest1[0].handle : '';\r\n    let username2 = userContest2.length>0 ? userContest2[0].handle : '';\r\n\r\n    for (let i = 0; i < userContest1.length; i++) {\r\n        contest1.set(userContest1[i].contestId, userContest1[i]);\r\n    }\r\n    for (let i = 0; i < userContest2.length; i++) {\r\n        if (!contest1.has(userContest2[i].contestId)) {\r\n            continue;\r\n        }\r\n\r\n        let diff=contest1.get(userContest2[i].contestId).rank-userContest2[i].rank;\r\n        if(diff<0){\r\n            one++;\r\n        }\r\n        else if(diff>0){\r\n            two++;\r\n        }\r\n        else{\r\n            draw++;\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        labels: [username1,username2,'Tied'],\r\n        datasets: [\r\n            {\r\n                label: \"Head-To-Head\",\r\n                data: [one,two,draw],\r\n                backgroundColor: [\r\n                    \"red\",\r\n                    \"blue\",\r\n                    \"orange\",\r\n                ],\r\n                borderColor: [\r\n                    \"rgba(255, 99, 132, 1)\",\r\n                    \"rgba(54, 162, 235, 1)\",\r\n                    \"rgba(255, 206, 86, 1)\",\r\n                ],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                display: true,\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Head-to-Head'\r\n            }\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Pie data={data} \r\n                options={options} \r\n                height={400} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusCommonPie\r\n","import './Footer.css';\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <span>\r\n                Developed by <a href=\"https://codeforces.com/profile/justnaman\"  target=\"_blank\">Naman Agrawal</a>\r\n            </span>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios'\r\n\r\nimport VersusRatingGraph from \"../components/VersusRatingGraph/VersusRatingGraph\"\r\nimport VersusCommonContest from \"../components/VersusCommonContest/VersusCommonContest\"\r\nimport VersusProblemIndexGraph from \"../components/VersusProblemIndexGraph/VersusProblemIndexGraph\"\r\nimport VersusProblemRatingGraph from \"../components/VersusProblemRatingGraph/VersusProblemRatingGraph\"\r\nimport VersusUserInfo from \"../components/VersusUser/VersusUserInfo\"\r\nimport VersusUserContest from \"../components/VersusUser/VersusUserContest\"\r\nimport VersusSubmissionsCompare from \"../components/VersusSubmissionsCompare/VersusSubmissionsCompare\"\r\nimport VersusCommonPie from \"../components/VersusCommonContest/VersusCommonPie\"\r\nimport Footer from '../components/Footer/Footer';\r\nimport './Versus.css';\r\n\r\n\r\nconst Versus = () => {\r\n\r\n    const [currname1, setCurrname1] = useState('');\r\n    const [username1, setUsername1] = useState('');\r\n    const [userInfo1, setUserInfo1] = useState('');\r\n    const [userContest1, setUserContest1] = useState('');\r\n    const [userSubmissions1, setUserSubmissions1] = useState('');\r\n\r\n    const [currname2, setCurrname2] = useState('');\r\n    const [username2, setUsername2] = useState('');\r\n    const [userInfo2, setUserInfo2] = useState('');\r\n    const [userContest2, setUserContest2] = useState('');\r\n    const [userSubmissions2, setUserSubmissions2] = useState('');\r\n\r\n    const fetchItemsVersus = async () => {\r\n        \r\n        const resultUI1 = await axios(`https://codeforces.com/api/user.info?handles=${currname1}`);\r\n        let user = resultUI1.data.result[0];\r\n        setUserInfo1(user);\r\n\r\n        const resultUI2 = await axios(`https://codeforces.com/api/user.info?handles=${currname2}`);\r\n        user = resultUI2.data.result[0];\r\n        setUserInfo2(user);\r\n\r\n        const resultUC1 = await axios(`https://codeforces.com/api/user.rating?handle=${currname1}`);\r\n        user = resultUC1.data.result;\r\n        setUserContest1(user);\r\n\r\n        const resultUC2 = await axios(`https://codeforces.com/api/user.rating?handle=${currname2}`);\r\n        user = resultUC2.data.result;\r\n        setUserContest2(user);\r\n\r\n        const resultUS1 = await axios(`https://codeforces.com/api/user.status?handle=${currname1}`)\r\n        user = resultUS1.data.result;\r\n        setUserSubmissions1(user);\r\n\r\n        const resultUS2 = await axios(`https://codeforces.com/api/user.status?handle=${currname2}`)\r\n        user = resultUS2.data.result;\r\n        setUserSubmissions2(user);\r\n\r\n\r\n    }\r\n\r\n\r\n    const handleSubmitVersus = async(e) => {\r\n        e.preventDefault();\r\n        setUsername1(currname1);\r\n        setUsername2(currname2);\r\n        console.log(currname1,currname2);\r\n        fetchItemsVersus();\r\n    }\r\n\r\n\r\n    function render() {\r\n        // console.log(userInfo1, userInfo2);\r\n        if (userInfo1 && username1 === userInfo1.handle && userInfo2 && username2 === userInfo2.handle) {\r\n            return (\r\n                <>\r\n                    <div className=\"versus-user-bio\">\r\n                        <div className=\"versus-user-bio-component\">\r\n                            <VersusUserInfo userInfo1={userInfo1} userInfo2={userInfo2} />\r\n                        </div>\r\n                        <div className=\"versus-user-bio-component\">\r\n                            <VersusUserContest userContest1={userContest1} userContest2={userContest2} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"versus-graph-components\" >\r\n                        <VersusRatingGraph userContest1={userContest1} userContest2={userContest2} />\r\n                    </div>\r\n\r\n                    <div className=\"versus-pie-chart\">\r\n                        <div className=\"versus-pie-chart-component\" >\r\n                            <VersusCommonPie userContest1={userContest1} userContest2={userContest2} />\r\n                        </div>\r\n                        <div className=\"versus-pie-chart-component\" >\r\n                            <VersusSubmissionsCompare userSubmissions1={userSubmissions1} userSubmissions2={userSubmissions2} username1={username1} username2={username2} />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"versus-graph-components\" >\r\n                        <VersusProblemIndexGraph userSubmissions1={userSubmissions1} userSubmissions2={userSubmissions2} username1={username1} username2={username2} />\r\n                    </div>\r\n                    <div className=\"versus-graph-components\" >\r\n                        <VersusProblemRatingGraph userSubmissions1={userSubmissions1} userSubmissions2={userSubmissions2} username1={username1} username2={username2} />\r\n                    </div>\r\n                    <div className=\"versus-graph-components versus-last\" >\r\n                        <VersusCommonContest userContest1={userContest1} userContest2={userContest2} />\r\n                    </div>\r\n                    <Footer/>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <form noValidate autoComplete=\"on\" onSubmit={handleSubmitVersus} className=\"versus-form\" >\r\n                <div className=\"versus-text-input\">\r\n                    <TextField\r\n                        className=\"versus-text-input-component\"\r\n                        onChange={(e) => setCurrname1(e.target.value)}\r\n                        label=\"Codeforces Username *\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    // required\r\n                    />\r\n                    <TextField\r\n                        className=\"versus-text-input-component\"\r\n                        onChange={(e) => setCurrname2(e.target.value)}\r\n                        label=\"Codeforces Username *\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    // required\r\n                    />\r\n                </div>\r\n                <Button\r\n                    className=\"versus-btn\"\r\n                    type=\"submit\"\r\n                    color=\"secondary\"\r\n                    variant=\"contained\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n            {render()}\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Versus\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './UserBio.css'\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // maxWidth: 500,\r\n    // minWidth: 450\r\n  },\r\n});\r\n\r\nconst rows = [\r\n\r\n];\r\n\r\nexport default function UserInfo({ userInfo, username }) {\r\n  const classes = useStyles();\r\n\r\n  let name=userInfo.firstName+\" \"+userInfo.lastName;\r\n  let country=userInfo.country;\r\n  let rating=userInfo.rating+'('+userInfo.rank+')';\r\n  let maxRating=userInfo.maxRating+'('+userInfo.maxRank+')';\r\n  let contribution=userInfo.contribution;\r\n\r\n  rows.splice(0,rows.length);\r\n  rows.push({\r\n    name:\"Name\",\r\n    data: name\r\n  });\r\n  rows.push({\r\n    name: 'Country',\r\n    data: country\r\n  });\r\n  rows.push({\r\n    name: 'Rating',\r\n    data: rating\r\n  });\r\n  rows.push({\r\n    name: 'Max Rating',\r\n    data: maxRating\r\n  });\r\n  rows.push({\r\n    name: 'Contribution',\r\n    data: contribution\r\n  });\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead className=\"table-head\">\r\n          <TableRow>\r\n            <TableCell>Info of</TableCell>\r\n            <TableCell align=\"right\">{username}</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody className=\"table-body\">\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.data}</TableCell>\r\n\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './UserBio.css'\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // maxWidth: 500,\r\n    // minWidth: 450\r\n  },\r\n});\r\n\r\nconst rows = [\r\n\r\n];\r\n\r\nexport default function UserContest({ userContest, username }) {\r\n  const classes = useStyles();\r\n\r\n  userContest = Array.from(userContest);\r\n  let bestRank = Math.min.apply(null, userContest.map(function (item) {\r\n    return item.rank;\r\n  }));\r\n  \r\n  let worstRank = Math.max.apply(null, userContest.map(function (item) {\r\n    return item.rank;\r\n  }));\r\n  let maxUp = Math.max.apply(null, userContest.map(function (item) {\r\n    return item.newRating - item.oldRating;\r\n  }));\r\n\r\n  let maxDown = Math.min.apply(null, userContest.map(function (item) {\r\n    return item.newRating - item.oldRating;\r\n  }));\r\n\r\n  rows.splice(0,rows.length);\r\n  rows.push({\r\n    name:\"No of contests\",\r\n    data: userContest.length\r\n  });\r\n  rows.push({\r\n    name: 'Best Rank',\r\n    data: bestRank\r\n  });\r\n  rows.push({\r\n    name: 'Worst Rank',\r\n    data: worstRank\r\n  });\r\n  rows.push({\r\n    name: 'Max Up',\r\n    data: maxUp\r\n  });\r\n  rows.push({\r\n    name: 'Max Down',\r\n    data: maxDown\r\n  });\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead className=\"table-head\">\r\n          <TableRow>\r\n            <TableCell>Contests of</TableCell>\r\n            <TableCell align=\"right\">{username}</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody className=\"table-body\">\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.data}</TableCell>\r\n\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { Pie } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport {Chart} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\n\r\n\r\nconst ProblemVerdict = ({userSubmissions}) => {\r\n   \r\n    let ac=0,tle=0,wa=0,rte=0,others=0,total;\r\n    total=userSubmissions.length;\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict===\"OK\"){\r\n            ac++;\r\n        }\r\n        else if(userSubmissions[i].verdict===\"TIME_LIMIT_EXCEEDED\"){\r\n            tle++;\r\n        }\r\n        else if(userSubmissions[i].verdict===\"WRONG_ANSWER\"){\r\n            wa++;\r\n        }\r\n        else if(userSubmissions[i].verdict===\"RUNTIME_ERROR\"){\r\n            rte++;\r\n        }\r\n        else{\r\n            others++;\r\n        }\r\n    }\r\n    \r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: '',\r\n            data: [],\r\n            backgroundColor: [\r\n                \"rgba(138, 216, 38, 0.8)\",\r\n                \"rgba(228, 28, 28, 0.8)\",\r\n                \"rgba(4, 119, 198, 0.8)\",\r\n                'rgba(198, 8, 140, 0.8)',\r\n                'rgba(155, 159, 182, 0.8)',\r\n                'rgba(205, 170, 30, 0.8)',\r\n            ],\r\n            borderColor: [\r\n                \"rgba(138, 216, 38, 1)\",\r\n                \"rgba(228, 28, 28, 1)\",\r\n                \"rgba(4, 119, 198, 1)\",\r\n                'rgba(198, 8, 140, 1)',\r\n                'rgba(155, 159, 182, 1)',\r\n                'rgba(205, 170, 30, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n            \r\n          },\r\n        ],\r\n    };\r\n    data.labels.push('Accepted');\r\n    data.datasets[0].data.push(ac);\r\n    data.labels.push('Wrong Answer');\r\n    data.datasets[0].data.push(wa);\r\n    data.labels.push('Time Limit Exceeded');\r\n    data.datasets[0].data.push(tle);\r\n    data.labels.push('Run Time Error');\r\n    data.datasets[0].data.push(rte);\r\n    data.labels.push('Others');\r\n    data.datasets[0].data.push(others);\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                display: false\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Verdicts',\r\n            },\r\n            datalabels: {\r\n                display: true,\r\n                align: 'bottom',\r\n                backgroundColor: '#ccc',\r\n                borderRadius: 3,\r\n                font: {\r\n                  size: 18,\r\n                }\r\n            },\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <Pie \r\n                data={data} \r\n                options={options}\r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProblemVerdict\r\n","import { Pie } from \"react-chartjs-2\";\r\n\r\nconst ProblemLanguage = ({ userSubmissions }) => {\r\n    let lang = new Map();\r\n\r\n    for (let i = 0; i < userSubmissions.length; i++) {\r\n        let currLang = userSubmissions[i].programmingLanguage;\r\n\r\n        if (!lang.has(currLang)) {\r\n            lang.set(currLang, 1);\r\n        } else {\r\n            let temp = lang.get(currLang);\r\n            lang.set(currLang, temp + 1);\r\n        }\r\n    }\r\n    \r\n    var langDsc = new Map([...lang.entries()].sort((a, b) => b[1] - a[1]));\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: \"\",\r\n                data: [],\r\n                backgroundColor: [\r\n                    \"rgba(228, 28, 28, 0.8)\",\r\n                    \"rgba(138, 216, 38, 0.8)\",\r\n                    \"rgba(4, 119, 198, 0.8)\",\r\n                    'rgba(198, 8, 140, 0.8)',\r\n                    'rgba(155, 159, 182, 0.8)',\r\n                    'rgba(205, 170, 30, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    \"rgba(228, 28, 28, 1)\",\r\n                    \"rgba(138, 216, 38, 1)\",\r\n                    \"rgba(4, 119, 198, 1)\",\r\n                    'rgba(198, 8, 140, 1)',\r\n                    'rgba(155, 159, 182, 1)',\r\n                    'rgba(205, 170, 30, 1)',\r\n                ],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n    for (let [key, value] of langDsc) {\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                display: false,\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Languages'\r\n            }\r\n        },\r\n    };\r\n    return (\r\n        <div>\r\n            <Pie data={data} \r\n                options={options} \r\n                height={400} \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProblemLanguage;\r\n","import { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\n\r\nconst RatingGraph = ({userContest}) => {\r\n    \r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Rating',\r\n            data: [],\r\n            fill: false,\r\n            backgroundColor: 'rgb(228,28,28,1)',\r\n            borderColor: 'rgba(228,28,28,0.3)',\r\n          },\r\n        ],\r\n    };\r\n\r\n    \r\n    userContest = Array.from(userContest);\r\n    \r\n    for(let i=0;i<userContest.length;i++){    \r\n        let dateSeconds=userContest[i].ratingUpdateTimeSeconds;\r\n        let rating=userContest[i].newRating;\r\n        var date = new Date(null);\r\n        date.setTime(dateSeconds*1000);\r\n        \r\n        let momentDate = moment(date).format('MMM D, YYYY');\r\n        \r\n        data.datasets[0].data.push({x: momentDate, y:rating});\r\n        \r\n    }\r\n\r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n          xAxes: [\r\n            {\r\n              type: 'time',\r\n              time: {\r\n               \r\n                month: 'YYYY MMM',\r\n                \r\n              }\r\n            }\r\n          ],\r\n        },\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: 'Rating Graph'\r\n            },\r\n            legend: {\r\n              display:false\r\n            }\r\n\r\n        },\r\n        animation: {\r\n          duration: 0\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n      };\r\n\r\n    return (\r\n        <div className=\"rating-graph\">\r\n            <Line \r\n                data={data} \r\n                options={options} \r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RatingGraph\r\n","import { Doughnut } from 'react-chartjs-2';\r\n\r\nconst ProblemTagsGraph = ({userSubmissions}) => {\r\n    \r\n    let tag=new Map();\r\n    let id=new Map();\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key=userSubmissions[i].contestId + userSubmissions[i].problem.index;\r\n        if(id.has(key)){\r\n            continue;\r\n        }\r\n        id.set(key,true);\r\n        let currTag=userSubmissions[i].problem.tags;\r\n        \r\n        for(let j=0;j<currTag.length;j++){\r\n            if(!tag.has(currTag[j])){\r\n                tag.set(currTag[j],1);\r\n            }\r\n            else{\r\n                let temp=tag.get(currTag[j]);\r\n                tag.set(currTag[j],temp+1)\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    var tagDsc = new Map([...tag.entries()].sort((a, b) =>  b[1]-a[1]));\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: '',\r\n            data: [],\r\n            backgroundColor: [\r\n                \"rgba(138, 216, 38, 0.8)\",\r\n                \"rgba(228, 28, 28, 0.8)\",\r\n                \"rgba(4, 119, 198, 0.8)\",\r\n                'rgba(198, 8, 140, 0.8)',\r\n                'rgba(155, 159, 182, 0.8)',\r\n\r\n                'rgba(63, 75, 172, 0.8)',\r\n                'rgba(9, 135, 54, 0.8)',\r\n                'rgba(6, 11, 110, 0.8)',\r\n                'rgba(255, 206, 86, 0.8)',\r\n                'rgba(75, 192, 192, 0.8)',\r\n                'rgba(153, 102, 255, 0.8)',\r\n                'rgba(255, 159, 64, 0.8)',\r\n            ],\r\n            borderColor: [\r\n                \"rgba(138, 216, 38, 1)\",\r\n                \"rgba(228, 28, 28, 1)\",\r\n                \"rgba(4, 119, 198, 1)\",\r\n                'rgba(198, 8, 140, 1)',\r\n                'rgba(155, 159, 182, 1)',\r\n                'rgba(63, 75, 172, 1)',\r\n                'rgba(9, 135, 54, 1)',\r\n                'rgba(6, 11, 110, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n            \r\n          },\r\n        ],\r\n    };\r\n    for(let[key,value] of tagDsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n\r\n    const options={\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins:{   \r\n            legend: {\r\n            //   display: false\r\n                position: \"right\",\r\n                align:\"center\"\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Problem Tags'\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Doughnut \r\n                data={data} \r\n                options={options}\r\n                height={400}\r\n                \r\n                \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProblemTagsGraph\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst ProblemRatingGraph = ({userSubmissions}) => {\r\n    \r\n    let rating = new Map();\r\n    let id=new Map();\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key=userSubmissions[i].contestId + userSubmissions[i].problem.index;\r\n        if(id.has(key)){\r\n            continue;\r\n        }\r\n        id.set(key,true);\r\n        let currRating=userSubmissions[i].problem.rating;\r\n        if(currRating===undefined){\r\n            continue;\r\n        }\r\n        currRating=parseInt(currRating);\r\n        if(!rating.has(currRating)){\r\n            rating.set(currRating,1);\r\n        }\r\n        else{\r\n            let temp=rating.get(currRating);\r\n            rating.set(currRating,temp+1);\r\n        }\r\n    }\r\n   \r\n    var ratingAsc = new Map([...rating.entries()].sort(function order(key1, key2) {\r\n        if (parseInt(key1) < parseInt(key2)) return -1;\r\n        else if (parseInt(key1) > parseInt(key2)) return +1;\r\n        else return 0;\r\n    }));\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Problem Count',\r\n            data: [],\r\n            backgroundColor: [\r\n              'rgba(228, 28, 28, 0.8)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(228, 28, 28, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n    for(let[key,value] of ratingAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Rating'\r\n          },\r\n          legend: {\r\n            display: false\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\r\n\t              height={400}\r\n               \r\n            />       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProblemRatingGraph\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst IndexGraph = ({userSubmissions}) => {\r\n    let index= new Map();\r\n    let id=new Map();\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key=userSubmissions[i].contestId + userSubmissions[i].problem.index;\r\n        if(id.has(key)){\r\n            continue;\r\n        }\r\n        id.set(key,true);\r\n        let currIndex=userSubmissions[i].problem.index[0];\r\n        if(currIndex<'A' || currIndex > 'Z'){\r\n          continue;\r\n        }\r\n        if(!index.has(currIndex)){\r\n            index.set(currIndex,1);\r\n        }\r\n        else{\r\n            let temp=index.get(currIndex);\r\n            index.set(currIndex,temp+1)\r\n        }\r\n    }\r\n    \r\n    var indexAsc = new Map([...index.entries()].sort());\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Problem Count',\r\n            data: [],\r\n            backgroundColor: [\r\n              'rgba(228, 28, 28, 0.8)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(228, 28, 28, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n    for(let[key,value] of indexAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n    \r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Index'\r\n          },\r\n          legend: {\r\n            display: false\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\t           \r\n                height={400}\r\n              \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndexGraph\r\n","import { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios'\r\n\r\nimport UserInfo from \"../components/UserBio/UserInfo\"\r\nimport UserContest from \"../components/UserBio/UserContest\"\r\nimport ProblemVerdict from \"../components/ProblemVerdict/ProblemVerdict\"\r\nimport ProblemLanguage from \"../components/ProblemLanguage/ProblemLanguage\"\r\nimport RatingGraph from \"../components/RatingGraph/RatingGraph\"\r\nimport ProblemTagsGraph from \"../components/ProblemTagsGraph/ProblemTagsGraph\"\r\nimport ProblemRatingGraph from \"../components/ProblemRatingGraph/ProblemRatingGraph\"\r\nimport ProblemIndexGraph from \"../components/ProblemIndexGraph/ProblemIndexGraph\"\r\nimport Footer from '../components/Footer/Footer';\r\nimport './SingleUser.css';\r\n\r\n\r\nconst SingleUser = () => {\r\n    let lastName;\r\n\r\n    const [currname, setCurrname] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [userInfo, setUserInfo] = useState('');\r\n    const [userContest, setUserContest] = useState('');\r\n    const [userSubmissions, setUserSubmissions] = useState('');\r\n\r\n    const fetchItems = async () => {\r\n        // console.log(currname, username);\r\n\r\n        const resultUI = await axios(`https://codeforces.com/api/user.info?handles=${currname}`);\r\n        let user = resultUI.data.result[0];\r\n        setUserInfo(user);\r\n\r\n\r\n        const resultUC = await axios(`https://codeforces.com/api/user.rating?handle=${currname}`);\r\n        user = resultUC.data.result;\r\n        setUserContest(user);\r\n\r\n\r\n        const resultUS = await axios(`https://codeforces.com/api/user.status?handle=${currname}`)\r\n        user = resultUS.data.result;\r\n        setUserSubmissions(user);\r\n\r\n\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // console.log(e.target);\r\n        setUsername(currname);\r\n        // console.log(currname, username);\r\n        fetchItems();\r\n        \r\n    }\r\n\r\n    function render() {\r\n        lastName = username;\r\n        // console.log(currname, username, userInfo,lastName);\r\n        \r\n        if (userInfo && username === userInfo.handle) {\r\n\r\n            return (\r\n                <>\r\n\r\n                    <div className=\"user-bio\">\r\n                        <div className=\"user-bio-component\">\r\n                            <UserInfo userInfo={userInfo} username={username} />\r\n                        </div>\r\n                        <div className=\"user-bio-component\">\r\n                            <UserContest userContest={userContest} username={username} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"graph-components\" >\r\n                        <RatingGraph userContest={userContest} />\r\n                    </div>\r\n\r\n                    <div className=\"pie-chart\">\r\n                        <div className=\"pie-chart-component\" >\r\n                            <ProblemVerdict userSubmissions={userSubmissions} />\r\n                        </div>\r\n                        <div className=\"pie-chart-component\" >\r\n                            <ProblemLanguage userSubmissions={userSubmissions} />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"graph-components\">\r\n                        <ProblemTagsGraph userSubmissions={userSubmissions} />\r\n                    </div>\r\n                    <div className=\"graph-components\">\r\n                        <ProblemIndexGraph userSubmissions={userSubmissions} />\r\n                    </div>\r\n                    <div className=\"graph-components last\">\r\n                        <ProblemRatingGraph userSubmissions={userSubmissions} />\r\n                    </div>\r\n\r\n                    <Footer />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"hero\">\r\n  <h1>🔥 Codeforces Analyzer</h1>\r\n  <p>Track your competitive programming journey. Analyze, compare, and improve with powerful visual insights.</p>\r\n  <img src=\"hero.svg\" alt=\"Hero Illustration\" className=\"hero-img\" />\r\n</div>\r\n\r\n            <form noValidate autoComplete=\"on\" onSubmit={handleSubmit} className=\"form\" >\r\n                <TextField\r\n                    className=\"text-input\"\r\n                    onChange={(e) => setCurrname(e.target.value)}\r\n                    label=\"Codeforces Username *\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                // required\r\n                />\r\n                <Button\r\n                    className=\"btn\"\r\n                    type=\"submit\"\r\n                    color=\"secondary\"\r\n                    variant=\"contained\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n            {username !== lastName && render()}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleUser\r\n","import './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Versus from './pages/Versus'\r\nimport SingleUser from './pages/SingleUser';\r\n\r\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/Codeforces-Analyzer/\" exact component={SingleUser} />\r\n        <Route path=\"/Codeforces-Analyzer/versus\" component={Versus} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}